services:
  # PostgreSQL database with pgvector extension
  db:
    image: ankane/pgvector:latest
    container_name: thoughtprocessor-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-thoughtprocessor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-thoughtprocessor}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
      - ./database/seeds:/docker-entrypoint-initdb.d/seeds
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-thoughtprocessor}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - thoughtprocessor-network

  # FastAPI backend service
  api:
    build:
      context: .
      dockerfile: ./api/Dockerfile
    container_name: thoughtprocessor-api
    ports:
      - "8000:8000"
    environment:
      # Database (use this for local dev, or Supabase for production)
      DATABASE_URL: postgresql://${POSTGRES_USER:-thoughtprocessor}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-thoughtprocessor}

      # AI APIs
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}

      # API Config
      API_HOST: 0.0.0.0
      API_PORT: 8000
      DEBUG: ${DEBUG:-false}

      # Kafka & Redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_ENABLED: ${KAFKA_ENABLED:-true}
      REDIS_URL: redis://redis:6379

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./api:/app
      - ./common:/app/common
      - ./kafka:/app/kafka
      - api_logs:/app/logs
    networks:
      - thoughtprocessor-network
    restart: unless-stopped

  # Kafka worker (replaces batch processor)
  kafka-worker:
    build:
      context: .
      dockerfile: ./batch_processor/Dockerfile
    env_file:
      - .env
    environment:
      - KAFKA_MODE=true
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./batch_processor:/app
      - ./common:/app/common
      - ./kafka:/app/kafka
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - thoughtprocessor-network
    command: python processor.py
    deploy:
      replicas: 3  # 3 workers for 3 Kafka partitions

  frontend:
    build: ./frontend
    container_name: thoughtprocessor-frontend
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - thoughtprocessor-network

  # Kafka (KRaft mode - no Zookeeper needed)
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: thoughtprocessor-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: MkU3OEVBNjcyNTc4NjM2Qk
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - thoughtprocessor-network

  # Redis for SSE pub/sub
  redis:
    image: redis:7-alpine
    container_name: thoughtprocessor-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - thoughtprocessor-network

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: thoughtprocessor-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - thoughtprocessor-network
    profiles:
      - tools  # Only start with: docker-compose --profile tools up

volumes:
  postgres_data:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  batch_logs:
    driver: local

networks:
  thoughtprocessor-network:
    driver: bridge
