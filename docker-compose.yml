services:
  # PostgreSQL database with pgvector extension
  db:
    image: ankane/pgvector:latest
    container_name: thoughtprocessor-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-thoughtprocessor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-thoughtprocessor}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
      - ./database/seeds:/docker-entrypoint-initdb.d/seeds
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-thoughtprocessor}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - thoughtprocessor-network

  # FastAPI backend service
  api:
    build:
      context: .
      dockerfile: ./api/Dockerfile
    container_name: thoughtprocessor-api
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      # Database (use this for local dev, or Supabase for production)
      DATABASE_URL: postgresql://${POSTGRES_USER:-thoughtprocessor}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-thoughtprocessor}

      # AI APIs
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}

      # API Config
      API_HOST: 0.0.0.0
      API_PORT: 8000
      DEBUG: ${DEBUG:-false}

      # Kafka & Redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_ENABLED: ${KAFKA_ENABLED:-true}
      REDIS_URL: redis://redis:6379

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./api:/app
      - ./common:/app/common
      - ./kafka:/app/kafka
      - api_logs:/app/logs
    networks:
      - thoughtprocessor-network
    restart: unless-stopped

  # Kafka worker (replaces batch processor)
  kafka-worker:
    build:
      context: .
      dockerfile: ./batch_processor/Dockerfile
    env_file:
      - .env
    environment:
      - KAFKA_MODE=true
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./batch_processor:/app
      - ./common:/app/common
      - ./kafka:/app/kafka
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - thoughtprocessor-network
    command: python processor.py
    deploy:
      replicas: 3  # 3 workers for 3 Kafka partitions

  frontend:
    build: ./frontend
    container_name: thoughtprocessor-frontend
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - thoughtprocessor-network

  # Kafka (KRaft mode - no Zookeeper needed)
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: thoughtprocessor-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: MkU3OEVBNjcyNTc4NjM2Qk
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - thoughtprocessor-network

  # Redis for SSE pub/sub
  redis:
    image: redis:7-alpine
    container_name: thoughtprocessor-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - thoughtprocessor-network

  # Integration tests
  integration-tests:
    build:
      context: .
      dockerfile: ./tests/Dockerfile
    container_name: thoughtprocessor-tests
    environment:
      API_BASE_URL: http://api:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-thoughtprocessor}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-thoughtprocessor}
      PYTHONUNBUFFERED: 1
    depends_on:
      api:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - thoughtprocessor-network
    profiles:
      - test  # Only start with: docker-compose --profile test up

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: thoughtprocessor-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - thoughtprocessor-network
    profiles:
      - tools  # Only start with: docker-compose --profile tools up

  # Monitoring Stack
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    container_name: thoughtprocessor-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - thoughtprocessor-network
    profiles:
      - monitoring

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: thoughtprocessor-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
      - loki
      - tempo
    networks:
      - thoughtprocessor-network
    profiles:
      - monitoring

  # Loki - Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: thoughtprocessor-loki
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - thoughtprocessor-network
    profiles:
      - monitoring

  # Promtail - Log shipper for Loki
  promtail:
    image: grafana/promtail:latest
    container_name: thoughtprocessor-promtail
    volumes:
      - ./config/promtail-config.yml:/etc/promtail/config.yml
      - api_logs:/var/log/api
      - batch_logs:/var/log/batch
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - thoughtprocessor-network
    profiles:
      - monitoring

  # Tempo - Distributed tracing
  tempo:
    image: grafana/tempo:latest
    container_name: thoughtprocessor-tempo
    ports:
      - "3200:3200"   # tempo
      - "4317:4317"   # otlp grpc
      - "4318:4318"   # otlp http
    volumes:
      - ./config/tempo-config.yml:/etc/tempo.yaml
      - tempo_data:/var/tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    networks:
      - thoughtprocessor-network
    profiles:
      - monitoring

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: thoughtprocessor-node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - thoughtprocessor-network
    profiles:
      - monitoring

  # PostgreSQL Exporter - Database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: thoughtprocessor-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-thoughtprocessor}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-thoughtprocessor}?sslmode=disable"
    depends_on:
      - db
    networks:
      - thoughtprocessor-network
    profiles:
      - monitoring

  # Redis Exporter - Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: thoughtprocessor-redis-exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: redis://redis:6379
    depends_on:
      - redis
    networks:
      - thoughtprocessor-network
    profiles:
      - monitoring

  # Kafka Exporter - Kafka metrics
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: thoughtprocessor-kafka-exporter
    ports:
      - "9308:9308"
    command:
      - '--kafka.server=kafka:9092'
    depends_on:
      - kafka
    networks:
      - thoughtprocessor-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  batch_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  tempo_data:
    driver: local

networks:
  thoughtprocessor-network:
    driver: bridge
